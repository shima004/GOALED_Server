// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: Multiplay.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameSyncServiceClient is the client API for GameSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameSyncServiceClient interface {
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	SendGameObject(ctx context.Context, opts ...grpc.CallOption) (GameSyncService_SendGameObjectClient, error)
	RecvGameObject(ctx context.Context, in *RecvGameObjectRequest, opts ...grpc.CallOption) (GameSyncService_RecvGameObjectClient, error)
}

type gameSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameSyncServiceClient(cc grpc.ClientConnInterface) GameSyncServiceClient {
	return &gameSyncServiceClient{cc}
}

func (c *gameSyncServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.GameSyncService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSyncServiceClient) SendGameObject(ctx context.Context, opts ...grpc.CallOption) (GameSyncService_SendGameObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameSyncService_ServiceDesc.Streams[0], "/Multiplay.GameSyncService/SendGameObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameSyncServiceSendGameObjectClient{stream}
	return x, nil
}

type GameSyncService_SendGameObjectClient interface {
	Send(*SendGameObjectRequest) error
	CloseAndRecv() (*SendGameObjectResponse, error)
	grpc.ClientStream
}

type gameSyncServiceSendGameObjectClient struct {
	grpc.ClientStream
}

func (x *gameSyncServiceSendGameObjectClient) Send(m *SendGameObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameSyncServiceSendGameObjectClient) CloseAndRecv() (*SendGameObjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendGameObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameSyncServiceClient) RecvGameObject(ctx context.Context, in *RecvGameObjectRequest, opts ...grpc.CallOption) (GameSyncService_RecvGameObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameSyncService_ServiceDesc.Streams[1], "/Multiplay.GameSyncService/RecvGameObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameSyncServiceRecvGameObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameSyncService_RecvGameObjectClient interface {
	Recv() (*RecvGameObjectResponse, error)
	grpc.ClientStream
}

type gameSyncServiceRecvGameObjectClient struct {
	grpc.ClientStream
}

func (x *gameSyncServiceRecvGameObjectClient) Recv() (*RecvGameObjectResponse, error) {
	m := new(RecvGameObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameSyncServiceServer is the server API for GameSyncService service.
// All implementations must embed UnimplementedGameSyncServiceServer
// for forward compatibility
type GameSyncServiceServer interface {
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	SendGameObject(GameSyncService_SendGameObjectServer) error
	RecvGameObject(*RecvGameObjectRequest, GameSyncService_RecvGameObjectServer) error
	mustEmbedUnimplementedGameSyncServiceServer()
}

// UnimplementedGameSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameSyncServiceServer struct {
}

func (UnimplementedGameSyncServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameSyncServiceServer) SendGameObject(GameSyncService_SendGameObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGameObject not implemented")
}
func (UnimplementedGameSyncServiceServer) RecvGameObject(*RecvGameObjectRequest, GameSyncService_RecvGameObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvGameObject not implemented")
}
func (UnimplementedGameSyncServiceServer) mustEmbedUnimplementedGameSyncServiceServer() {}

// UnsafeGameSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameSyncServiceServer will
// result in compilation errors.
type UnsafeGameSyncServiceServer interface {
	mustEmbedUnimplementedGameSyncServiceServer()
}

func RegisterGameSyncServiceServer(s grpc.ServiceRegistrar, srv GameSyncServiceServer) {
	s.RegisterService(&GameSyncService_ServiceDesc, srv)
}

func _GameSyncService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSyncServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.GameSyncService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSyncServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSyncService_SendGameObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameSyncServiceServer).SendGameObject(&gameSyncServiceSendGameObjectServer{stream})
}

type GameSyncService_SendGameObjectServer interface {
	SendAndClose(*SendGameObjectResponse) error
	Recv() (*SendGameObjectRequest, error)
	grpc.ServerStream
}

type gameSyncServiceSendGameObjectServer struct {
	grpc.ServerStream
}

func (x *gameSyncServiceSendGameObjectServer) SendAndClose(m *SendGameObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameSyncServiceSendGameObjectServer) Recv() (*SendGameObjectRequest, error) {
	m := new(SendGameObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameSyncService_RecvGameObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecvGameObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameSyncServiceServer).RecvGameObject(m, &gameSyncServiceRecvGameObjectServer{stream})
}

type GameSyncService_RecvGameObjectServer interface {
	Send(*RecvGameObjectResponse) error
	grpc.ServerStream
}

type gameSyncServiceRecvGameObjectServer struct {
	grpc.ServerStream
}

func (x *gameSyncServiceRecvGameObjectServer) Send(m *RecvGameObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GameSyncService_ServiceDesc is the grpc.ServiceDesc for GameSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Multiplay.GameSyncService",
	HandlerType: (*GameSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _GameSyncService_StartGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendGameObject",
			Handler:       _GameSyncService_SendGameObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecvGameObject",
			Handler:       _GameSyncService_RecvGameObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Multiplay.proto",
}

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	CreatePrivateRoom(ctx context.Context, in *CreatePrivateRoomRequest, opts ...grpc.CallOption) (*CreatePrivateRoomResponse, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error)
	GetPlayerId(ctx context.Context, in *GetPlayerIDRequest, opts ...grpc.CallOption) (*GetPlayerIDResponse, error)
	SyncRoomUsers(ctx context.Context, in *SyncRoomUsersRequest, opts ...grpc.CallOption) (RoomService_SyncRoomUsersClient, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) CreatePrivateRoom(ctx context.Context, in *CreatePrivateRoomRequest, opts ...grpc.CallOption) (*CreatePrivateRoomResponse, error) {
	out := new(CreatePrivateRoomResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/CreatePrivateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*LeaveRoomResponse, error) {
	out := new(LeaveRoomResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetPlayerId(ctx context.Context, in *GetPlayerIDRequest, opts ...grpc.CallOption) (*GetPlayerIDResponse, error) {
	out := new(GetPlayerIDResponse)
	err := c.cc.Invoke(ctx, "/Multiplay.RoomService/GetPlayerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) SyncRoomUsers(ctx context.Context, in *SyncRoomUsersRequest, opts ...grpc.CallOption) (RoomService_SyncRoomUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomService_ServiceDesc.Streams[0], "/Multiplay.RoomService/SyncRoomUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomServiceSyncRoomUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomService_SyncRoomUsersClient interface {
	Recv() (*SyncRoomUsersResponse, error)
	grpc.ClientStream
}

type roomServiceSyncRoomUsersClient struct {
	grpc.ClientStream
}

func (x *roomServiceSyncRoomUsersClient) Recv() (*SyncRoomUsersResponse, error) {
	m := new(SyncRoomUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	CreatePrivateRoom(context.Context, *CreatePrivateRoomRequest) (*CreatePrivateRoomResponse, error)
	GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error)
	GetPlayerId(context.Context, *GetPlayerIDRequest) (*GetPlayerIDResponse, error)
	SyncRoomUsers(*SyncRoomUsersRequest, RoomService_SyncRoomUsersServer) error
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServiceServer) CreatePrivateRoom(context.Context, *CreatePrivateRoomRequest) (*CreatePrivateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateRoom not implemented")
}
func (UnimplementedRoomServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*LeaveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedRoomServiceServer) GetPlayerId(context.Context, *GetPlayerIDRequest) (*GetPlayerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerId not implemented")
}
func (UnimplementedRoomServiceServer) SyncRoomUsers(*SyncRoomUsersRequest, RoomService_SyncRoomUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncRoomUsers not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&RoomService_ServiceDesc, srv)
}

func _RoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_CreatePrivateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreatePrivateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/CreatePrivateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreatePrivateRoom(ctx, req.(*CreatePrivateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetPlayerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetPlayerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multiplay.RoomService/GetPlayerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetPlayerId(ctx, req.(*GetPlayerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_SyncRoomUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRoomUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomServiceServer).SyncRoomUsers(m, &roomServiceSyncRoomUsersServer{stream})
}

type RoomService_SyncRoomUsersServer interface {
	Send(*SyncRoomUsersResponse) error
	grpc.ServerStream
}

type roomServiceSyncRoomUsersServer struct {
	grpc.ServerStream
}

func (x *roomServiceSyncRoomUsersServer) Send(m *SyncRoomUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RoomService_ServiceDesc is the grpc.ServiceDesc for RoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Multiplay.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomService_CreateRoom_Handler,
		},
		{
			MethodName: "CreatePrivateRoom",
			Handler:    _RoomService_CreatePrivateRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _RoomService_GetRooms_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _RoomService_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _RoomService_LeaveRoom_Handler,
		},
		{
			MethodName: "GetPlayerId",
			Handler:    _RoomService_GetPlayerId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncRoomUsers",
			Handler:       _RoomService_SyncRoomUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Multiplay.proto",
}
