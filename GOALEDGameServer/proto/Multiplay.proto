syntax="proto3";

package Multiplay;

option go_package = "../go/pb";

message Vec3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message GameObject {
  string object_id = 1;
  string user_id = 2;
  Vec3 position = 3;
  Vec3 velocity = 4;
  Vec3 rotation = 5;
  int32 type = 6;
}

message Player {
  string playerId = 1;
  string name = 2;
  string room_id = 3;
}

message StartGameRequest{
  string room_id = 1;
  string player_id = 2;
}

message StartGameResponse {
  string message = 1;
}

message SendGameObjectRequest {
  string player_id = 1;
  string room_id = 2;
  repeated GameObject gameObjects = 3;
}

message SendGameObjectResponse {
  string message = 1;
}

message RecvGameObjectRequest {
  string player_id = 1;
  string room_id = 2;
}

message RecvGameObjectResponse {
  repeated GameObject gameObjects = 1;
}

message SyncPlayerValiableRequest {
  string player_id = 1;
  string room_id = 2;
  Player player = 3;
}

service GameSyncService {
  rpc StartGame(StartGameRequest) returns (StartGameResponse);
  rpc SendGameObject(stream SendGameObjectRequest) returns (SendGameObjectResponse) {}
  rpc RecvGameObject(RecvGameObjectRequest) returns (stream RecvGameObjectResponse) {}
  rpc SyncPlayerValiable(stream Player) returns (Player) {}
}

enum RoomStatus {
  WAITING = 0;
  PLAYING = 1;
}

message Room {
  string room_id = 1;
  string room_name = 2;
  string host_player_id = 3;
  int32 max_player = 4;
  int32 current_player = 5;
  RoomStatus status = 6;
}

message CreateRoomRequest {
  string player_id = 1;
  string room_name = 2;
}

message CreateRoomResponse {
  string room_id = 1;
}

message CreatePrivateRoomRequest {
  string player_id = 1;
  string room_name = 2;
  string room_id = 3;
}

message CreatePrivateRoomResponse {
  string room_id = 1;
}

message GetRoomsRequest {
}

message GetRoomsResponse {
  repeated Room rooms = 1;
}

message JoinRoomRequest {
  string room_id = 1;
  Player player = 2;
}

message JoinRoomResponse {
  bool success = 1;
}

message LeaveRoomRequest {
  string room_id = 1;
  string player_id = 2;
}

message LeaveRoomResponse {
  bool success = 1;
}

message GetPlayerIDRequest {
}

message GetPlayerIDResponse {
  string player_id = 1;
}

message SyncRoomUsersRequest {
  string room_id = 1;
  string player_id = 2;
}

message SyncRoomUsersResponse {
  Player player = 1;
  bool is_left = 2;
}

service RoomService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);
  rpc CreatePrivateRoom(CreatePrivateRoomRequest) returns (CreatePrivateRoomResponse);
  rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse) {}
  rpc JoinRoom(JoinRoomRequest) returns (JoinRoomResponse) {}
  rpc LeaveRoom(LeaveRoomRequest) returns (LeaveRoomResponse) {}
  rpc GetPlayerId(GetPlayerIDRequest) returns (GetPlayerIDResponse) {}
  rpc SyncRoomUsers(SyncRoomUsersRequest) returns (stream SyncRoomUsersResponse) {}
}
